unit testlist

fam Nat = Zero | Succ Nat

fam Int = P Nat | N Nat

let zero = Zero
let one = (Succ Zero)
let two = Succ (Succ Zero)

fam FUnit = Unit
fam Bool = True | False
fam Ord = LT | EQ | GT
fam Error = Error
fam List = Nil | Cons Any L

let head x = match x [ Cons x z -> x]
let cons x y = Cons x y
rec {
    let addNat x y = match x
        [ Zero -> y
        , Succ x' -> addNat x' (Succ y)]

    let subNat x y = match y
        [ Zero -> x
        , Succ y' -> match x
            [ Succ x' -> subNat x' y'
            , -- ERROR
              Zero -> match x [_ -> Error]
        ]]

    let compareNat x y = match x
        [ Zero -> match y [Zero -> EQ, _ -> LT]
        , Succ x -> match y [Zero -> GT, Succ y -> compareNat x y]

        ]

    let fib x = match x
    [ Zero -> zero
    , Succ x' -> match x'
        -- one
        [ Zero -> one
        -- > two
        , Succ x'' -> addNat (fib (subNat x one))
                             (fib (subNat x two)) ]

    ]
    }

-- let main unused = fib two
-- let main unused = fib (addNat two two)


let main unused =
    (
        let four = addNat two two
        in
        fib four
    )